{"version":3,"sources":["../src/support.ts","../src/commands.ts"],"names":["snapshot","Cypress","Commands","add","name","config","cy","document","then","doc","manualSnapshot","get","snapshots","as","beforeEach","wrap","task","action","payload","allowedDomains","env","afterEach","automaticSnapshots","manualSnapshots","url","testTitlePath","spec","relativeToCommonRoot","currentTest","titlePath","domSnapshots","chromaticStorybookParams","diffThreshold","delay","diffIncludeAntiAliasing","forcedColors","pauseAnimationAtEnd","prefersReducedMotion","cropToViewport","ignoreSelectors","pageUrl","viewport","height","width","outputDir"],"mappings":"AAAA,OAASA,YAAAA,MAAgB,2BCAzB,OAASA,YAAAA,MAAgB,2BAkBzBC,QAAQC,SAASC,IAAI,eAAiBC,GAAAA,CAE/BH,QAAQI,OAAO,gBAAA,GAIpBC,GAAGC,SAAQ,EAAGC,KAAMC,GAAAA,CAElB,IAAMC,EAAiBV,EAASS,CAAAA,EAEhCH,GAAGK,IAAI,kBAAA,EAEJH,KAAMI,GACE,IAAIA,EAAW,CAAER,KAAAA,EAAMJ,SAAUU,CAAe,EACzD,EACCG,GAAG,iBAAA,CACR,CAAA,CACF,CAAA,ED/BAC,WAAW,IAAA,CAEJb,QAAQI,OAAO,gBAAA,IAMpBC,GAAGS,KAAK,CAAA,CAAE,EAAEF,GAAG,iBAAA,EACfP,GAAGU,KAAK,kBAAmB,CACzBC,OAAQ,yBACRC,QAAS,CAAEC,eAAgBlB,QAAQmB,IAAI,cAAA,CAAgB,CACzD,CAAA,EACF,CAAA,EAEAC,UAAU,IAAA,CAEHpB,QAAQI,OAAO,gBAAA,GAIpBC,GAAGC,SAAQ,EAAGC,KAAMC,GAAAA,CAClB,IAAMa,EAAsBrB,QAAQmB,IAAI,qBAAA,EAEpC,CAAA,EADA,CAAC,CAAEpB,SAAUA,EAASS,CAAAA,CAAK,GAG/BH,GAAGK,IAAI,kBAAA,EAAoBH,KAAK,CAACe,EAAkB,CAAA,IAAE,CACnDjB,GAAGkB,IAAG,EAAGhB,KAAMgB,GAAAA,CAEblB,GAAGU,KAAK,kBAAmB,CACzBC,OAAQ,gBACRC,QAAS,CAEPO,cAAe,CAACxB,QAAQyB,KAAKC,wBAAyB1B,QAAQ2B,YAAYC,WAC1EC,aAAc,IAAIP,KAAoBD,GACtCS,yBAA0B,CACxB,GAAI9B,QAAQmB,IAAI,eAAA,GAAoB,CAAEY,cAAe/B,QAAQmB,IAAI,eAAA,CAAiB,EAClF,GAAInB,QAAQmB,IAAI,OAAA,GAAY,CAAEa,MAAOhC,QAAQmB,IAAI,OAAA,CAAS,EAC1D,GAAInB,QAAQmB,IAAI,yBAAA,GAA8B,CAC5Cc,wBAAyBjC,QAAQmB,IAAI,yBAAA,CACvC,EACA,GAAInB,QAAQmB,IAAI,eAAA,GAAoB,CAAEY,cAAe/B,QAAQmB,IAAI,eAAA,CAAiB,EAClF,GAAInB,QAAQmB,IAAI,cAAA,GAAmB,CAAEe,aAAclC,QAAQmB,IAAI,cAAA,CAAgB,EAC/E,GAAInB,QAAQmB,IAAI,qBAAA,GAA0B,CACxCgB,oBAAqBnC,QAAQmB,IAAI,qBAAA,CACnC,EACA,GAAInB,QAAQmB,IAAI,sBAAA,GAA2B,CACzCiB,qBAAsBpC,QAAQmB,IAAI,sBAAA,CACpC,EACA,GAAInB,QAAQmB,IAAI,gBAAA,GAAqB,CACnCkB,eAAgBrC,QAAQmB,IAAI,gBAAA,CAC9B,EACA,GAAInB,QAAQmB,IAAI,iBAAA,GAAsB,CACpCmB,gBAAiBtC,QAAQmB,IAAI,iBAAA,CAC/B,CACF,EACAoB,QAAShB,EACTiB,SAAU,CACRC,OAAQzC,QAAQI,OAAO,gBAAA,EACvBsC,MAAO1C,QAAQI,OAAO,eAAA,CACxB,EACAuC,UAAW3C,QAAQI,OAAO,iBAAA,CAC5B,CACF,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA","sourcesContent":["import { snapshot } from '@chromaui/rrweb-snapshot';\nimport './commands';\n\n// these client-side lifecycle hooks will be added to the user's Cypress suite\nbeforeEach(() => {\n  // don't take snapshots when running `cypress open`\n  if (!Cypress.config('isTextTerminal')) {\n    return;\n  }\n  // this \"manualSnapshots\" variable will be available before, during, and after the test,\n  // then cleaned up before the next test is run\n  // (see https://docs.cypress.io/guides/core-concepts/variables-and-aliases#Aliases)\n  cy.wrap([]).as('manualSnapshots');\n  cy.task('prepareArchives', {\n    action: 'setup-network-listener',\n    payload: { allowedDomains: Cypress.env('assetDomains') },\n  });\n});\n\nafterEach(() => {\n  // don't take snapshots when running `cypress open`\n  if (!Cypress.config('isTextTerminal')) {\n    return;\n  }\n  // can we be sure this always fires after all the requests are back?\n  cy.document().then((doc) => {\n    const automaticSnapshots = !Cypress.env('disableAutoSnapshot')\n      ? [{ snapshot: snapshot(doc) }]\n      : [];\n    // @ts-expect-error will fix when Cypress has its own package\n    cy.get('@manualSnapshots').then((manualSnapshots = []) => {\n      cy.url().then((url) => {\n        // pass the snapshot to the server to write to disk\n        cy.task('prepareArchives', {\n          action: 'save-archives',\n          payload: {\n            // @ts-expect-error relativeToCommonRoot is on spec (but undocumented)\n            testTitlePath: [Cypress.spec.relativeToCommonRoot, ...Cypress.currentTest.titlePath],\n            domSnapshots: [...manualSnapshots, ...automaticSnapshots],\n            chromaticStorybookParams: {\n              ...(Cypress.env('diffThreshold') && { diffThreshold: Cypress.env('diffThreshold') }),\n              ...(Cypress.env('delay') && { delay: Cypress.env('delay') }),\n              ...(Cypress.env('diffIncludeAntiAliasing') && {\n                diffIncludeAntiAliasing: Cypress.env('diffIncludeAntiAliasing'),\n              }),\n              ...(Cypress.env('diffThreshold') && { diffThreshold: Cypress.env('diffThreshold') }),\n              ...(Cypress.env('forcedColors') && { forcedColors: Cypress.env('forcedColors') }),\n              ...(Cypress.env('pauseAnimationAtEnd') && {\n                pauseAnimationAtEnd: Cypress.env('pauseAnimationAtEnd'),\n              }),\n              ...(Cypress.env('prefersReducedMotion') && {\n                prefersReducedMotion: Cypress.env('prefersReducedMotion'),\n              }),\n              ...(Cypress.env('cropToViewport') && {\n                cropToViewport: Cypress.env('cropToViewport'),\n              }),\n              ...(Cypress.env('ignoreSelectors') && {\n                ignoreSelectors: Cypress.env('ignoreSelectors'),\n              }),\n            },\n            pageUrl: url,\n            viewport: {\n              height: Cypress.config('viewportHeight'),\n              width: Cypress.config('viewportWidth'),\n            },\n            outputDir: Cypress.config('downloadsFolder'),\n          },\n        });\n      });\n    });\n  });\n});\n","import { snapshot } from '@chromaui/rrweb-snapshot';\nimport type { elementNode } from '@chromaui/rrweb-snapshot';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Method for taking a manual snapshot with Chromatic\n       *\n       *\n       * @param {string} name - Use to apply a custom name to the snapshot  (optional)\n       */\n      takeSnapshot(name?: string): Chainable<any>;\n    }\n  }\n}\n\nCypress.Commands.add('takeSnapshot', (name?: string) => {\n  // don't take snapshots when running `cypress open`\n  if (!Cypress.config('isTextTerminal')) {\n    return;\n  }\n\n  cy.document().then((doc) => {\n    // here, handle the source map\n    const manualSnapshot = snapshot(doc);\n    // reassign manualSnapshots so it includes this new snapshot\n    cy.get('@manualSnapshots')\n      // @ts-expect-error will fix when Cypress has its own package\n      .then((snapshots: elementNode[]) => {\n        return [...snapshots, { name, snapshot: manualSnapshot }];\n      })\n      .as('manualSnapshots');\n  });\n});\n"]}