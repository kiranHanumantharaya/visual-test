import { rebuild, NodeType } from '@chromaui/rrweb-snapshot';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var pageUrl = new URL(window.location.href);
pageUrl.pathname = "";
pageUrl.search = "";
var strippedUrl = pageUrl.toString().replace(/\/$/, "");
var findHtmlNode = /* @__PURE__ */ __name((node) => {
  if (node.type === NodeType.Element && node.tagName === "html") {
    return node;
  }
  if ("childNodes" in node) {
    return node.childNodes.find((childNode) => {
      return findHtmlNode(childNode);
    });
  }
  return void 0;
}, "findHtmlNode");
function snapshotFileName(snapshotId, viewport) {
  const fileNameParts = [
    snapshotId,
    viewport,
    "snapshot.json"
  ];
  return fileNameParts.join(".");
}
__name(snapshotFileName, "snapshotFileName");
async function fetchSnapshot(context) {
  const { url, id } = context.storyContext.parameters.server;
  const { viewport } = context.storyContext.globals;
  let viewportName;
  if (typeof viewport === "string") {
    viewportName = viewport;
  } else {
    viewportName = `w${viewport.width}h${viewport.height}`;
  }
  let response = await fetch(`${url}/${snapshotFileName(id, viewportName)}`);
  if (!response.ok) {
    const { defaultViewport } = context.storyContext.parameters.viewport;
    response = await fetch(`${url}/${snapshotFileName(id, defaultViewport)}`);
  }
  return response.json();
}
__name(fetchSnapshot, "fetchSnapshot");
var renderToCanvas = /* @__PURE__ */ __name(async (context, element) => {
  const snapshot = await fetchSnapshot(context);
  const htmlNode = findHtmlNode(snapshot);
  const html = await rebuild(htmlNode, {
    doc: document
  });
  document.replaceChild(html, document.children[0]);
  document.head.innerHTML += '<script id="storybook-root"><\/script><script id="storybook-docs"><\/script>';
  context.showMain();
  return () => {
  };
}, "renderToCanvas");
var preview_default = {
  renderToCanvas,
  parameters: {
    server: {
      url: strippedUrl
    },
    layout: "fullscreen"
  }
};

export { preview_default as default };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=preview.mjs.map